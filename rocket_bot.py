import asyncio
import logging
from rocketchat_API.rocketchat import RocketChat

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class RocketChatBot:
    def __init__(self, config):
        self.config = config
        self.rocket = None
        self.user_id = None
        self.username = None
        self.running = False
        self.processed_messages = set()  # –•—Ä–∞–Ω–∏–º ID –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.commands = {
            'help': {
                'function': self.show_help,
                'description': '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥'
            },
            'ping': {
                'function': self.ping,
                'description': '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞'
            },
            'calc': {
                'function': self.calculate,
                'description': '–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä: calc 2+2)'
            }
        }

    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ REST API"""
        try:
            self.rocket = RocketChat(
                user=self.config['username'],
                password=self.config['password'],
                server_url=self.config['server_url']
            )
            me = self.rocket.me().json()
            self.user_id = me['_id']
            self.username = me['username']
            logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫–∞–∫ {self.username}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

    async def get_new_messages(self):
        try:
            # self.rocket.im_list() - –í—ã–∑–æ–≤ REST API Rocket.Chat –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤
            # .get('ims', []) - –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ (–µ—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç, –≤–µ—Ä–Ω—ë—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫)
            im_list = self.rocket.im_list().json().get('ims', [])

            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–Ω–∞—Ç
            tasks = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
            for chat in im_list:  # –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
                # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã:
                # –ó–∞–¥–∞—á–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
                # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
                task = asyncio.create_task(self.process_room(chat['_id']))
                tasks.append(task)

            # *tasks - —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            await asyncio.gather(*tasks)  # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

    async def process_room(self, room_id):
        # Rocket.Chat API –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤
        # –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ:
        messages = self.rocket.im_history(room_id=room_id, count=10).json().get('messages', [])
        await asyncio.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ 100 –º—Å –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        for msg in messages:
            if msg['_id'] not in self.processed_messages:
                await self.process_message(msg)
                self.processed_messages.add(msg['_id'])

    async def process_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            text = message.get('msg', '').strip()
            sender = message['u']['username']
            room_id = message['rid']

            logger.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender}: {text}")

            # –î–æ–±–∞–≤–ª—è–µ–º room_id –ø—Ä–∏ –≤—ã–∑–æ–≤–µ
            response = await self.handle_command(text, sender, room_id)
            if response:
                self.rocket.chat_post_message(
                    room_id=room_id,
                    text=response
                )
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç: {response}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

    async def handle_command(self, command_text, sender, room_id=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"""
        try:
            if not command_text or not sender:
                logger.error("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
                return None

            parts = command_text.split()
            command = parts[0].lower()
            args = parts[1:] if len(parts) > 1 else []

            if command in self.commands:
                logger.debug(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã {command} –æ—Ç {sender} –≤ –∫–æ–º–Ω–∞—Ç–µ {room_id}")
                return await self.commands[command]['function'](sender, room_id, *args)
            return None

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
            return f"@{sender} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã"

    async def show_help(self, sender, room_id, *args):
        help_text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        for cmd, data in self.commands.items():
            help_text += f"‚Ä¢ {cmd} - {data['description']}\n"
        return help_text

    async def ping(self, sender, room_id, *args):
        return "Pong! üèì"

    async def calculate(self, sender, room_id, *args):
        if not args:
            return "–£–∫–∞–∂–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: calc 2+2)"
        try:
            expression = ' '.join(args)
            result = eval(expression)  # –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å eval!
            return f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {expression} = {result}"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {e}"

    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª"""
        self.running = True

        if not await self.connect():
            self.running = False
            return

        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")

        try:
            while self.running:
                await self.get_new_messages()
                await asyncio.sleep(3)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã

        except KeyboardInterrupt:
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
        finally:
            self.running = False
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    config = {
        'server_url': 'http://localhost:3000',
        'username': 'ArbiTrue',
        'password': 'ArbiTrue'
    }

    bot = RocketChatBot(config)
    asyncio.run(bot.run())